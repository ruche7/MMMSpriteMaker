<Window
    x:Class="MMMSpriteMaker.View.ConfigWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:c="http://ruche-home.net/xaml/wpf/converters"
    xmlns:vm="http://ruche-home.net/xaml/wpf/viewModel"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:app="clr-namespace:MMMSpriteMaker"
    xmlns:appvm="clr-namespace:MMMSpriteMaker.ViewModel"
    xmlns:prop="clr-namespace:MMMSpriteMaker.Properties"
    Title="{x:Static prop:Resources.ConfigWindow_Caption}"
    SizeToContent="WidthAndHeight"
    ResizeMode="CanMinimize"
    AllowDrop="True"
    PreviewDragOver="Window_PreviewDragOver"
    Drop="Window_Drop">
    <Window.DataContext>
        <appvm:ConfigViewModel />
    </Window.DataContext>
    <Window.Resources>
        <!-- enum values -->
        <ObjectDataProvider x:Key="imageRenderTypes" ObjectType="{x:Type sys:Enum}" MethodName="GetValues">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="app:ImageRenderType" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="imageFlipSettings" ObjectType="{x:Type sys:Enum}" MethodName="GetValues">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="app:ImageFlipSetting" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="lightSettings" ObjectType="{x:Type sys:Enum}" MethodName="GetValues">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="app:LightSetting" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <!-- converters -->
        <c:EnumValueDisplayConverter x:Key="enumValueDisplayConverter" />
        <c:EnumValueEquationConverter x:Key="enumValueEquationConverter" />
        <c:BooleanVisibilityConverter x:Key="booleanVisibilityConverter" />
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="Close" Executed="OnCloseCommandExecuted" />
    </Window.CommandBindings>

    <!-- window body -->
    <Grid Margin="4">
        <Grid.Resources>
            <Style TargetType="Button">
                <Setter Property="Margin" Value="4" />
                <Setter Property="Padding" Value="4,2" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="Margin" Value="4" />
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="ComboBox">
                <Setter Property="Margin" Value="4" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ContentPresenter Content="{Binding Converter={StaticResource enumValueDisplayConverter}}" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="CheckBox">
                <Setter Property="Margin" Value="4" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="Border">
                <Setter Property="BorderBrush" Value="Black" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Margin" Value="4" />
                <Setter Property="Padding" Value="4" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="RadioButton">
                <Setter Property="Margin" Value="6,2" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="TextBox">
                <Setter Property="MinWidth" Value="60" />
                <Setter Property="Margin" Value="4" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="True">
                        <Setter Property="ToolTip">
                            <Setter.Value>
                                <Binding
                                    Path="(Validation.Errors).CurrentItem.ErrorContent"
                                    RelativeSource="{x:Static RelativeSource.Self}" />
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <!-- row 0 -->
        <TextBlock
            Text="{x:Static prop:Resources.ConfigWindow_RenderType}"
            Grid.Row="0" Grid.Column="0" />
        <Border Grid.Row="0" Grid.Column="1">
            <StackPanel>
                <ComboBox
                    ItemsSource="{Binding Source={StaticResource imageRenderTypes}}"
                    SelectedValue="{Binding RenderType}" />
                <CheckBox
                    Content="{x:Static prop:Resources.ConfigWindow_RenderingBack}"
                    IsChecked="{Binding RenderingBack}"
                    Visibility="{Binding CanRenderBack, Converter={StaticResource booleanVisibilityConverter}}" />
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <!-- row 0 -->
                    <TextBlock
                        Text="{x:Static prop:Resources.ConfigWindow_LightSetting}"
                        Visibility="{Binding CanUseLight, Converter={StaticResource booleanVisibilityConverter}}"
                        Grid.Row="0" Grid.Column="0" />
                    <ComboBox
                        ItemsSource="{Binding Source={StaticResource lightSettings}}"
                        SelectedValue="{Binding LightSetting}"
                        Visibility="{Binding CanUseLight, Converter={StaticResource booleanVisibilityConverter}}"
                        Grid.Row="0" Grid.Column="1" />

                    <!-- row 1 -->
                    <TextBlock
                        Text="{x:Static prop:Resources.ConfigWindow_PixelRatio}"
                        Visibility="{Binding UsePixelRatio, Converter={StaticResource booleanVisibilityConverter}}"
                        Grid.Row="1" Grid.Column="0" />
                    <TextBox
                        Visibility="{Binding UsePixelRatio, Converter={StaticResource booleanVisibilityConverter}}"
                        Grid.Row="1" Grid.Column="1">
                        <Binding Path="PixelRatio" ValidatesOnExceptions="True">
                            <Binding.Converter>
                                <c:RangedSingleStringConverter
                                    MinValue="{x:Static appvm:ConfigViewModel.MinPixelRatio}"
                                    MaxValue="{x:Static appvm:ConfigViewModel.MaxPixelRatio}"
                                    MinDecimalPlaces="1" />
                            </Binding.Converter>
                        </Binding>
                    </TextBox>

                    <!-- row 2 -->
                    <TextBlock
                        Text="{x:Static prop:Resources.ConfigWindow_ViewportWidth}"
                        Visibility="{Binding UseSpriteViewportWidth, Converter={StaticResource booleanVisibilityConverter}}"
                        Grid.Row="2" Grid.Column="0" />
                    <TextBox
                        Visibility="{Binding UseSpriteViewportWidth, Converter={StaticResource booleanVisibilityConverter}}"
                        Grid.Row="2" Grid.Column="1">
                        <Binding Path="SpriteViewportWidth" ValidatesOnExceptions="True">
                            <Binding.Converter>
                                <c:RangedSingleStringConverter
                                    MinValue="{x:Static appvm:ConfigViewModel.MinSpriteViewportWidth}"
                                    MaxValue="{x:Static appvm:ConfigViewModel.MaxSpriteViewportWidth}"
                                    MinDecimalPlaces="1" />
                            </Binding.Converter>
                        </Binding>
                    </TextBox>

                    <!-- row 3 -->
                    <TextBlock
                        Text="{x:Static prop:Resources.ConfigWindow_ZRange}"
                        Visibility="{Binding UseSpriteZRange, Converter={StaticResource booleanVisibilityConverter}}"
                        Grid.Row="3" Grid.Column="0" />
                    <TextBox
                        Visibility="{Binding UseSpriteZRange, Converter={StaticResource booleanVisibilityConverter}}"
                        Grid.Row="3" Grid.Column="1">
                        <Binding Path="SpriteZRange" ValidatesOnExceptions="True">
                            <Binding.Converter>
                                <c:RangedSingleStringConverter
                                    MinValue="{x:Static appvm:ConfigViewModel.MinSpriteZRange}"
                                    MaxValue="{x:Static appvm:ConfigViewModel.MaxSpriteZRange}"
                                    MinDecimalPlaces="1" />
                            </Binding.Converter>
                        </Binding>
                    </TextBox>
                </Grid>
            </StackPanel>
        </Border>

        <!-- row 1 -->
        <TextBlock
            Text="{x:Static prop:Resources.ConfigWindow_BasePoint}"
            Grid.Row="1" Grid.Column="0" />
        <Border Grid.Row="1" Grid.Column="1">
            <Border.BorderBrush>
                <SolidColorBrush Color="{StaticResource {x:Static SystemColors.WindowFrameColorKey}}"/>
            </Border.BorderBrush>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <RadioButton
                    Content="{x:Static prop:Resources.Enum_ImageBasePoint_LeftTop}"
                    IsChecked="{Binding BasePoint, Converter={StaticResource enumValueEquationConverter}, ConverterParameter=LeftTop}"
                    Grid.Row="0" Grid.Column="0" />
                <RadioButton
                    Content="{x:Static prop:Resources.Enum_ImageBasePoint_MiddleTop}"
                    IsChecked="{Binding BasePoint, Converter={StaticResource enumValueEquationConverter}, ConverterParameter=MiddleTop}"
                    Grid.Row="0" Grid.Column="1" />
                <RadioButton
                    Content="{x:Static prop:Resources.Enum_ImageBasePoint_RightTop}"
                    IsChecked="{Binding BasePoint, Converter={StaticResource enumValueEquationConverter}, ConverterParameter=RightTop}"
                    Grid.Row="0" Grid.Column="2" />
                <RadioButton
                    Content="{x:Static prop:Resources.Enum_ImageBasePoint_LeftMiddle}"
                    IsChecked="{Binding BasePoint, Converter={StaticResource enumValueEquationConverter}, ConverterParameter=LeftMiddle}"
                    Grid.Row="1" Grid.Column="0" />
                <RadioButton
                    Content="{x:Static prop:Resources.Enum_ImageBasePoint_Center}"
                    IsChecked="{Binding BasePoint, Converter={StaticResource enumValueEquationConverter}, ConverterParameter=Center}"
                    Grid.Row="1" Grid.Column="1" />
                <RadioButton
                    Content="{x:Static prop:Resources.Enum_ImageBasePoint_RightMiddle}"
                    IsChecked="{Binding BasePoint, Converter={StaticResource enumValueEquationConverter}, ConverterParameter=RightMiddle}"
                    Grid.Row="1" Grid.Column="2" />
                <RadioButton
                    Content="{x:Static prop:Resources.Enum_ImageBasePoint_LeftBottom}"
                    IsChecked="{Binding BasePoint, Converter={StaticResource enumValueEquationConverter}, ConverterParameter=LeftBottom}"
                    Grid.Row="2" Grid.Column="0" />
                <RadioButton
                    Content="{x:Static prop:Resources.Enum_ImageBasePoint_MiddleBottom}"
                    IsChecked="{Binding BasePoint, Converter={StaticResource enumValueEquationConverter}, ConverterParameter=MiddleBottom}"
                    Grid.Row="2" Grid.Column="1" />
                <RadioButton
                    Content="{x:Static prop:Resources.Enum_ImageBasePoint_RightBottom}"
                    IsChecked="{Binding BasePoint, Converter={StaticResource enumValueEquationConverter}, ConverterParameter=RightBottom}"
                    Grid.Row="2" Grid.Column="2" />
            </Grid>
        </Border>

        <!-- row 2 -->
        <TextBlock
            Text="{x:Static prop:Resources.ConfigWindow_FlipSetting}"
            Grid.Row="2" Grid.Column="0" />
        <Border Grid.Row="2" Grid.Column="1">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!-- row 0 -->
                <TextBlock
                    Text="{x:Static prop:Resources.ConfigWindow_FlipHorizontal}"
                    Grid.Row="0" Grid.Column="0" />
                <ComboBox
                    ItemsSource="{Binding Source={StaticResource imageFlipSettings}}"
                    SelectedValue="{Binding HorizontalFlipSetting}"
                    Grid.Row="0" Grid.Column="1" />

                <!-- row 1 -->
                <TextBlock
                    Text="{x:Static prop:Resources.ConfigWindow_FlipVertical}"
                    Grid.Row="1" Grid.Column="0" />
                <ComboBox
                    ItemsSource="{Binding Source={StaticResource imageFlipSettings}}"
                    SelectedValue="{Binding VerticalFlipSetting}"
                    Grid.Row="1" Grid.Column="1" />
            </Grid>
        </Border>
        
        <!-- row 3-->
        <StackPanel
            Orientation="Horizontal"
            HorizontalAlignment="Right"
            Margin="0,4,0,0"
            Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2">
            <Button
                Content="{x:Static prop:Resources.ConfigWindow_Reset}"
                Command="{Binding ResetCommand}" />
            <Button
                Content="{x:Static prop:Resources.ConfigWindow_Close}"
                Command="Close" />
        </StackPanel>
    </Grid>
</Window>
